def notifyLINE(status) {
    def token = "o6yuYkuBhvzKKcRsO5LSckQDXTzpny41GwQ03uGXSHI"
    def jobName = env.JOB_NAME +' '+env.BRANCH_NAME 
    def buildNo = env.BUILD_NUMBER
    def stickerIdFailureList = ["2005","2007","2008","2019","2018","2020","2024","2022"]  
    def stickerIdSuccessList = ["1989","1993","1998","1991","1992","2003"]  
    def url = 'https://notify-api.line.me/api/notify'
    def stickerPackageId="446"
    Collections.shuffle stickerIdSuccessList
    stickerId=stickerIdSuccessList.first()
    if(status=="Failed"){
        Collections.shuffle stickerIdFailureList
        stickerId=stickerIdFailureList.first()
    }
    def message = "${env.JOB_NAME}\r\nMicroservice Name : ${MicroserviceName}\r\nVersion: ${Version}\r\nBranch: ${Branch}\r\nBuild and Deploy #${buildNo} ${status} \r\n"
    sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}' -F 'stickerPackageId=${stickerPackageId}' -F 'stickerId=${stickerId}'"
}
// build parameter in jenkins can be refer here
pipeline {
   agent { node "HPC-RTX-2080TI" } //destinatio device 
   
    environment { //set env
        dockerImage = ''
    }
   
    stages { //stage = column 
        stage ('Prepare Job') { //header 
            steps {
                script {//add description to ui page
                    currentBuild.description = "Version: ${Version}\nBranch: ${Branch}"
                }
            }
        }

        stage('Git Pull'){
            steps {
               checkout([$class: 'GitSCM', //config
                    branches: [[name: "${Branch}"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [],
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: "gitlab-jenkins-user-password", url: "http://192.168.140.91/internship/social-sentiment-trends/Sentiment-Analysis.git"]]])
            }// change url and loop through
        }

        stage('Build Image'){
            steps {
                script { //sh = execute in node device (not in jenkins)
                    // def subfolders = new File('deploy').listFiles().findAll { it.isDirectory() }
                    // subfolders.each { subfolder ->
                    //     echo subfolder
                    // }
                    sh "sudo docker build -f deploy/${MicroserviceName}/dockerfile -t ${ProjectName}/${MicroserviceName}:${Version} ." // --build-arg BUILD_ID=pre_${MicroserviceName} ."
                }
                script{
                    sh "sudo docker images | grep ${ProjectName}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "pwd"
                    sh """
                        cd deploy && \
                        sed -i 's#${ProjectName}/${MicroserviceName}:*#${ProjectName}/${MicroserviceName}:${Version}#g' ${MicroserviceName}/docker-compose.yml
                    """
                    sh """
                        cd deploy && \
                        sudo docker compose -f ${MicroserviceName}/docker-compose.yml down --remove-orphans && \
                        sudo docker compose -f ${MicroserviceName}/docker-compose.yml --env-file .env up -d
                    """
                }
            }
        }

            

        // stage('Cleanup'){
        //     // for cleaning builder (in multi stage build)
        //     steps {
        //         script {
        //             echo 'Cleanup'
        //             sh """
        //             docker images \
        //                 | awk '{ print \$1,\$3 }' \
        //                 | grep ${MicroserviceName} \
        //                 | awk '{print \$2 }' \
        //                 | xargs -I {} docker rmi -f {}
        //             """
        //             sh """
        //             docker image prune -f \
        //                 --filter label=stage=builder \
        //                 --filter label=build=pre_${MicroserviceName}
        //             """

        //           }
        //         }
        //     }
    }
    post {   
         success {  
             notifyLINE("Succeed")
             //mail bcc: '', body: "<b>Jenkins Report</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'pd.admin@rvconnex.com', mimeType: 'text/html', replyTo: '', subject: "successful CI: Project name -> ${env.JOB_NAME}", to: "kunchid.c@rvconnex.com";
         }  
         failure {  
             notifyLINE("Failed")

             //mail bcc: '', body: "<b>Jenkins Report</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'pd.admin@rvconnex.com', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "kunchid.c@rvconnex.com";  
         }   
    }  
}