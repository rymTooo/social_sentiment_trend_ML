services:
  s3:
    restart: always
    image: minio/minio
    container_name: minio_standalone
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      minio_network:
        ipv4_address: 172.20.0.2
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_ADDRESS=${MINIO_ADDRESS} #same port number as api
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS} #same port number as console
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS} #True or false
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  tracking_server:
    build:
      context: ..
      dockerfile: ./mlflow_deploy/dockerfile.mlflow
    image: mlflow_server
    container_name: mlflow_server_standalone
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      minio_network:
        ipv4_address: 172.20.0.3
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY} #minio accesskey
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY} #minio secret accesskey
      - MLFLOW_S3_ENDPOINT_URL= http://172.20.0.2:${MINIO_PORT} #point to minio >> in the form of http://{ip}:{api port}
      - MLFLOW_S3_IGNORE_TLS=true
    command: >
      mlflow server
      --backend-store-uri file:///D:/Kafka_spark/mlruns
      --host 0.0.0.0
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME}
#set backend uri >> some DB, set artifact to minio(s3) >> {ip}://{bucket name}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      minio_network:
        ipv4_address: 172.20.0.4

  kafka:
    container_name: kafka_test
    # image: 'confluentinc/cp-kafka:latest'
    build:
      context: .
      dockerfile: dockerfile.kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # volumes:
    #   - ./entrypoint.sh:/usr/bin/entrypoint.sh
    # entrypoint: ["bash", "/usr/bin/entrypoint.sh"]
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      minio_network:
        ipv4_address: 172.20.0.5

networks:
  minio_network:
    external: true

volumes:
  minio_data: